// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TrafficSelectorPolicy
    {
        public TrafficSelectorPolicy(List<string> localAddressSpaces, List<string> remoteAddressSpaces)
        {
            this.LocalAddressSpaces = localAddressSpaces;
            this.RemoteAddressSpaces = remoteAddressSpaces;
            this.CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the local address spaces which are in CIDR format
        /// </summary>
        [JsonProperty(PropertyName = "localAddressSpaces")]
        public List<string> LocalAddressSpaces { get; set; }

        /// <summary>
        /// Gets or sets the remote address spaces which are in CIDR format
        /// </summary>
        [JsonProperty(PropertyName = "remoteAddressSpaces")]
        public List<string> RemoteAddressSpaces { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.LocalAddressSpaces == null || !this.LocalAddressSpaces.Any())
            {
                throw new ValidationException(ValidationRules.CannotBeNull, nameof(this.LocalAddressSpaces));
            }
            if (this.RemoteAddressSpaces == null || !this.RemoteAddressSpaces.Any())
            {
                throw new ValidationException(ValidationRules.CannotBeNull, nameof(this.RemoteAddressSpaces));
            }
        }
    }
}
